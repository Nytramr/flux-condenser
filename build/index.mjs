class s{constructor(){this._actionListeners={}}dispatch({action:s,payload:t}){if(!this._actionListeners[s])throw new Error(s+" is not registered");this._actionListeners[s].forEach(s=>s(t))}addActionListener(s,t){return this._actionListeners[s]=this._actionListeners[s]||[],this._actionListeners[s].push(t),()=>{this.removeActionListener(s,t)}}removeActionListener(s,t){this._actionListeners[s]=this._actionListeners[s].filter(s=>s!==t)}}const t=new s,e=(s,e)=>(...r)=>{const n=e(...r);t.dispatch(s,n)},r=s=>{const t={};return(...e)=>{const r=JSON.stringify(e);return t[r]||(t[r]=t=>s(t,...e)),t[r]}},n=s=>(...t)=>e=>s(e,...t),i={};class c{constructor(s={}){this._state=s,this._subscribers=new Map,this._condenserUnsubscribers=[]}addCondenser(s,t,e){const r=s.addActionListener(t,s=>{this._state=e(this._state,s),this._subscribers.forEach((s,t)=>{const e=t(this._state);s.lastValue!==e&&(s.lastValue=e,s.cbs.forEach(s=>s(e)))})});return this._condenserUnsubscribers.push(r),()=>{this._condenserUnsubscribers=this._condenserUnsubscribers.filter(s=>s!==r),r()}}destroyStore(){this._condenserUnsubscribers.forEach(s=>s())}subscribe(s,t){this._subscribers.has(t)||this._subscribers.set(t,{cbs:[],lastValue:t(this._state)});const e=this._subscribers.get(t);return e.cbs.push(s),s(e.lastValue),()=>{this.unSubscribe(s,t)}}unSubscribe(s,t){const e=this._subscribers.get(t);e.cbs=e.cbs.filter(t=>t!==s)}execExtractor(s){return s(this._state)}}class o extends c{constructor(s,t={}){super(t),this._dispatcher=s}dispatch({action:s,payload:t}){this._dispatcher.dispatch({action:s,payload:t})}addCondenser(s,t){return super.addCondenser(this._dispatcher,s,t)}}function a(s,e,r=[]){"symbol"!=typeof s&&console.warn("Fancy error message to encourage people to use symbols as store names");const n=i[s]||(i[s]=new o(t,e));return r.forEach(([s,t])=>n.addCondenser(s,t)),n}function h(s){return i[s]}export{c as BaseStore,s as Dispatcher,o as Store,e as createActionDispatcher,n as createExtractor,r as createMemoExtractor,a as createStore,t as dispatcher,h as getStore};
